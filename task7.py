# Новак Ян ПИ17-1 Вариант 1
#
# Требуется проанализировать информацию из двух разных баз данных. Каждая база данных
# содержит n числовых значений (так что общее количество значений равно 2n); будем
# считать, что одинаковых значений нет. Требуется вычислить медиану этого множества из
# 2n значений, которую мы определим как n-е значение в порядке возрастания. Однако доступ
# к информации затруднен — ее можно получить только при помощи запросов к базам данных.
# В одном запросе указывается значение k для одной из двух баз данных, и выбранная база
# данных возвращает k-е значение в порядке возрастания, содержащееся в этой базе. Так как
# обращения к базам занимают много времени, медиану хотелось бы вычислить с минимальным
# количеством запросов. Приведите алгоритм вычисления медианы с количеством запросов
# не более O(log n).

from typing import List


def get_median(d1: List[int], d2: List[int]):
    def _get_median():
        nonlocal l1, r1, l2, r2

        i1, i2 = l1 + (r1 - l1) // 2, l2 + (r2 - l2) // 2
        el1, el2 = d1[i1], d2[i2]

        print(f'l1 = {l1}  ;;  r1 = {r1}  ;;  d1 = {d1[l1:r1 + 1]}  ;;  el1 = {el1}')
        print(f'l2 = {l2}  ;;  r2 = {r2}  ;;  d2 = {d2[l2:r2 + 1]}  ;;  el2 = {el2}')
        print()

        if l1 == r1 and l2 == r2:
            return min(el1, el2)

        if el1 > el2:
            r1 = max(i1 - 1, 0)
            l2 = min(i2 + 1, r2)
        elif el2 > el1:
            l1 = min(i1 + 1, r1)
            r2 = max(i2 - 1, 0)
        else:
            return el1

        return _get_median()

    assert len(d1) == len(d2), 'Базы данных имеют не одинаковый размер'

    l1, r1, l2, r2 = 0, len(d1) - 1, 0, len(d2) - 1
    return _get_median()


print(get_median([10, 16, 16, 19, 19], [3, 4, 7, 10, 12]), end='\n' * 4)
print(get_median([10, 16, 16, 19, 19], [3, 4, 7, 9, 12]))
